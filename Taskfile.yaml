version: '3'

# Reference: https://taskfile.dev/usage and tutorial video: https://www.youtube.com/watch?v=_-bpnCY3-FE

vars:
  GOCMD: go
  ENV: dev
  BUILD_DIR: build
  GOFLAGS: -race
  FLAGS: -v -x
  LDFLAGS: -ldflags="-w -s -X cmd.Version=1.0.0 -X cmd.CommitHash={{ .COMMIT_HASH }}"
  BENCH_CMD: '{{ .GOCMD }} test {{ .GOFLAGS }} -run=^$$ -bench=. -benchtime=10s ./...'
  PPROF_CMD: '{{ .GOCMD }} tool pprof -pdf {{ .BUILD_DIR }}/profile.out > {{ .BUILD_DIR }}/profile.pdf'

includes:
  build: ./environment/{{OS}}.yml

tasks:
  run:
    label: run the app
    cmds:
      - '{{ .GOCMD }} run ./main.go'

  build:
    label: build the app for {{ .GOOS }}/{{ .GOARCH }}
    cmds:
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o {{ .BUILD_DIR }}/{{ .APP_NAME }} {{ .GOFLAGS }} {{ .FLAGS }} ./main.go'

  release:
    label: build the app for release
    cmds:
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o {{ .BUILD_DIR }}/{{ .APP_NAME_DIST }} {{ .GOFLAGS }} {{ .LDFLAGS }} ./main.go'

  build-dist-linux-amd64:
    label: Build distribution for Linux amd64
    cmds:
      - 'mkdir -p {{ .BUILD_DIR }}/dist/linux-amd64'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o {{ .BUILD_DIR }}/dist/linux-amd64/{{ .APP_NAME }} {{ .LDFLAGS }} ./main.go'
      # - 'zip -j {{ .BUILD_DIR }}/dist/linux-amd64/{{ .APP_NAME }}.zip {{ .BUILD_DIR }}/dist/linux-amd64/{{ .APP_NAME }}'

  build-hacks:
    label: build all binaries in hack folder
    cmds:
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/eventReceiver.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/eventReceiver/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/serverReceiveMock.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/serverReceiveMock/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/eventSender.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/eventSender/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/config2string.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/config2string/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/mockFile.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/mockFile/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/maskParticipant.exe {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/maskParticipant/main.go'

  build-hacks-linux:
    label: build all binaries in hack folder linux
    cmds:
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/eventReceiver {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/eventReceiver/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/serverReceiveMock {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/serverReceiveMock/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/eventSender {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/eventSender/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/config2string {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/config2string/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/mockFile {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/mockFile/main.go'
      - '{{ .GOBUILD }} {{ .GOCMD }} build -o hacks/bin/maskParticipant {{ .GOFLAGS }} {{ .LDFLAGS }} ./hacks/maskParticipant/main.go'

  test:
    label: run tests
    cmds:
      - '{{ .GOCMD }} test ./...'

  vulncheck:
    label: run vulncheck
    cmds:
      - 'govulncheck ./...'

  vet:
    label: run go vet
    cmds:
      - '{{ .GOCMD }} vet ./...'

  check-gofmt:
    label: Check gofmt passes
    cmds:
      - 'if [ -n "$($GOCMD fmt -l .)" ]; then echo "gofmt failed, please run $GOCMD fmt -w ."; exit 1; fi'

  benchmark:
    label: run benchmarks
    cmds:
      - '{{ .BENCH_CMD }}'

  profile:
    cmds:
      - 'mkdir -p {{ .BUILD_DIR }}'
      - '{{ .GOCMD }} test {{ .GOFLAGS }} -cpuprofile={{ .BUILD_DIR }}/cpu.out -memprofile={{ .BUILD_DIR }}/mem.out'
      - '{{ .GOCMD }} tool pprof -output={{ .BUILD_DIR }}/profile.out {{ .BUILD_DIR }}/{{ .PROJECT_NAME }} {{ .BUILD_DIR }}/cpu.out'
      - '{{ .PPROF_CMD }}'
